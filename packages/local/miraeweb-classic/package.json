{
    /**
     * The name of the package.
     */
    "name": "miraeweb-classic",

    "sencha": {

        "namespace": "Miraeweb",
        "type": "code",
        "toolkit": "classic",


        "creator": "anonymous",


        "summary": "Short summary",


        "detailedDescription": "Long description of package",


        "version": "1.0.0",


        "compatVersion": "1.0.0",


        "format": "1",


        "slicer":null,

        /**
         * Controls the output directory.
         */
        "output": "${package.dir}/build",

        /**
         * Indicates whether this is a locally developed package or downloaded form a repository.
         * Defaults to true on newly generated packages, should not be changed.
         */
        "local": true,

        /**
         * The theme (package) this package will use (e.g., "ext-theme-neptune", etc.).
         * This is only needed if the built package will be used by a non-Cmd application.
         *
         *     "theme": "ext-theme-classic",
         */

        /**
         * Sass configuration properties.
         */
        "sass" : {
            /**
             * The namespace to which this package's SASS corresponds. The default value of
             * "Miraeweb.classic" means that the files in ./sass/src (and ./sass/var) match classes in
             * the Miraeweb.classic" root namespace. In other words, "Miraeweb.classic.panel.Panel" maps to
             * ./sass/src/panel/Panel.scss.
             *
             * To style classes from any namespace, set this to blank. If this is blank,
             * then to style "Miraeweb.classic.panel.Panel" you would put SASS in
             * ./sass/src/Miraeweb.classic/panel/Panel.scss.
             */
            "namespace": "Miraeweb",

            /**
             * Comma-separated list of files or folders containing extra Sass. These
             * files are automatically included in the Sass compilation. By default this
             * is just "etc/all.scss" to allow import directives to control the order
             * other files are included.
             *
             * All "etc" files are included at the top of the Sass compilation in their
             * dependency order:
             *
             *      +-------+---------+
             *      |       | base    |
             *      | theme +---------+
             *      |       | derived |
             *      +-------+---------+
             *      | packages        |  (in package dependency order)
             *      +-----------------+
             *      | application     |
             *      +-----------------+
             */
            "etc": [
                "${package.dir}/sass/etc/all.scss"
             ],

            /**
             * Comma-separated list of folders containing Sass variable definitions
             * files. These file can also define Sass mixins for use by components.
             *
             * All "var" files are included after "etc" files in the Sass compilation in
             * dependency order:
             *
             *      +-------+---------+
             *      |       | base    |
             *      | theme +---------+
             *      |       | derived |
             *      +-------+---------+
             *      | packages        |  (in package dependency order)
             *      +-----------------+
             *      | application     |
             *      +-----------------+
             *
             * The "sass/var/all.scss" file is always included at the start of the var
             * block before any files associated with JavaScript classes.
             */
            "var": [
                "${package.dir}/sass/var"
            ],

            /**
             * Comma-separated list of folders containing Sass rule files.
             *
             * All "src" files are included after "var" files in the Sass compilation in
             * dependency order (the same order as "etc"):
             *
             *      +-------+---------+
             *      |       | base    |
             *      | theme +---------+
             *      |       | derived |
             *      +-------+---------+
             *      | packages        |  (in package dependency order)
             *      +-----------------+
             *      | application     |
             *      +-----------------+
             */
            "src": [
                "${package.dir}/sass/src"
            ]
        },

        /**
         * This is the comma-separated list of folders where classes reside. These
         * classes must be explicitly required to be included in the build.
         */
        "classpath": [
            "${package.dir}/src"
        ],

        /**
         * Comma-separated string with the paths of directories or files to search. Any classes
         * declared in these locations will be automatically required and included in the build.
         * If any file defines an Ext JS override (using Ext.define with an "override" property),
         * that override will in fact only be included in the build if the target class specified
         * in the "override" property is also included.
         */
        "overrides": [
            "${package.dir}/overrides"
        ],

        "example": {
            /**
             * One or more folders that contain example applications for this package.
             */
            "path": [
                "${package.dir}/examples"
            ]

            /**
             * You can list apps specifically.
             *
             *      "apps": [
             *          "demo1",
             *          "demo2"
             *      ]
             *
             * By default, all subfolders in the path are considered example applications.
             */
        },

        /**
         * The framework this package will use (i.e., "ext" or "touch").
         * This is only needed if the built package will be used by a non-Cmd application.
         *
         *     "framework": "ext",
         */

        /**
         * Packages can require other packages in the same way that applications can require
         * packages.
         *
         * Can be specified as an array of package names or configuration objects.
         *
         *      "requires": [
         *          "foo",
         *          "bar@1.1-2.0",
         *          {
         *              "name": "baz"
         *              "version": "1.5"
         *          }
         *      ]
         *
         * Can also be specified as an object:
         *
         *      "requires": {
         *          "foo": "2.2",
         *          "bar": {
         *              "minVersion": "1.1",
         *              "version": "2.0"
         *          }
         *      }
         */
        "requires": []
    }
}
